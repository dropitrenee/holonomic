//#import "math.h"
#include "NXCDefs.h"

#define SPEED 80 //power
#define DISTANCE 30 //cm

mutex sensorMutex;

task move();
task checkSensors();

void square(int speed, int sizesec);
void arc(int speed, int radius);
void makeAStar(int speed);
void moveForward(int speed);
void moveLeft(int speed);
void moveRight(int speed);
void moveBack(int speed);
void rotate(int speed);
void moveWithAngle(int speed, float angle);
void moveWithHeadingDirection(int speed, float angle);
void lookAround();
void lookLeft();
void lookRight();

void checkUltraSensorPort3(int speed);

float lookUpSin[] = {1.0, 0.5403023, -0.41614684, -0.9899925, -0.6536436, 0.2836622,
0.96017027, 0.75390226, -0.14550003, -0.91113025, -0.8390715, 0.004425698, 0.84385395,
0.9074468, 0.13673721, -0.7596879, -0.9576595, -0.27516335, 0.6603167, 0.9887046,
0.40808207, -0.54772925, -0.99996084, -0.53283304, 0.42417902, 0.99120283, 0.6469193,
-0.29213881, -0.9626059, -0.74805754, 0.15425146, 0.91474235, 0.8342234, -0.013276747,
-0.8485703, -0.9036922, -0.12796369, 0.76541406, 0.95507365, 0.26664293, -0.66693807,
-0.98733926, -0.3999853, 0.5551133, 0.9998433, 0.52532196, -0.43217793, -0.9923355,
-0.64014435, 0.30059254, 0.964966, 0.7421542, -0.16299078, -0.9182828, -0.8293098,
0.022126757, 0.8532201, 0.8998668, 0.119180135, -0.7710802, -0.95241296, -0.25810164,
0.67350715, 0.9858966, 0.39185724, -0.56245387, -0.99964744, -0.5177698, 0.44014302,
0.9933904, 0.6333192, -0.30902272, -0.9672506, -0.7361927, 0.17171735, 0.92175126,
0.82433134, -0.030975033, -0.8578031, -0.89597094, -0.11038724, 0.77668595, 0.9496777,
0.24954012, -0.6800235, -0.98437667, -0.38369843, 0.5697503, 0.99937326, 0.510177,
-0.44807363, -0.9943675, -0.62644446, 0.3174287, 0.96945935, 0.7301736, -0.18043044,
-0.92514753, -0.81928825, 0.03982088, 0.8623189, 0.89200485, 0.1015857, -0.7822309,
-0.946868, -0.24095905, 0.68648654, 0.98277956, 0.3755096, -0.57700217, -0.9990208,
-0.50254434, 0.4559691, 0.9952666, 0.6195206, -0.3258098, -0.9715922, -0.7240972,
0.18912943, 0.9284713, 0.81418097, -0.04866361, -0.8667671, -0.8879689, -0.0927762,
0.78771454, 0.94398415, 0.2323591, -0.6928958, -0.9811055, -0.36729133, 0.58420885,
0.99859005, 0.4948722, -0.46382886, -0.99608785, -0.61254823, 0.3341654, 0.9736489,
0.7179641, -0.19781357, -0.93172234, -0.8090099, 0.057502527, 0.8711474, 0.8838634,
0.08395944, -0.7931364, -0.94102633, -0.22374095, 0.6992508, 0.9793546, 0.35904428,
-0.5913697, -0.9980811, -0.48716134, 0.4716523, 0.996831, 0.6055279, -0.3424948,
-0.9756293, -0.71177477, 0.20648223, 0.9349004, 0.8037755, -0.06633694, -0.87545943,
-0.8796886, -0.07513609, 0.7984962, 0.9379948, 0.21510527, -0.705551, -0.97752696,
-0.3507691, 0.5984842, 0.9974939, 0.47941232, -0.47943875, -0.99749607, -0.5984601,
0.35079736, 0.9775333, 0.70552963, -0.21513471, -0.9380052, -0.79847807, 0.07516615,
0.8797029, 0.8754449, 0.06630686, -0.8037934, -0.93488973, -0.20645273, 0.7117959,
0.9756227, 0.34246644, -0.60555184, -0.9968286, -0.47162572, 0.48718768, 0.99808294,
0.59134537, -0.35907242, -0.9793607, -0.69922924, 0.22377034, 0.9410365, 0.79311806,
-0.08398947, -0.88387746, -0.8711326, -0.05747243, 0.8090276, 0.93171144, 0.19778402,
-0.7179851, -0.973642, -0.33413696, 0.6125721, 0.99608517, 0.46380216, -0.4948984,
-0.99859166, -0.58418435, 0.36731938, 0.98111135, 0.6928741, -0.23238842, -0.9439941,
-0.78769594, 0.09280622, 0.8879828, 0.866752, 0.0486335, -0.8141985, -0.9284601,
-0.18909982, 0.724118, 0.97158504, 0.32578132, -0.61954427, -0.9952637, -0.45594227,
0.5025704, 0.9990221, 0.57697755, -0.37553754, -0.98278517, -0.6864646, 0.2409883,
0.9468777, 0.78221214, -0.10161569, -0.8920185, -0.8623036, -0.03979076, 0.81930554,
0.9251361, 0.1804008, -0.73019415, -0.96945196, -0.31740013, 0.62646794, 0.99436426,
0.44804665, -0.51020294, -0.99937433, -0.5697256, 0.38372627, 0.984382, 0.6800014,
-0.24956931, -0.9496871, -0.776667, 0.1104172, 0.89598435, 0.8577876, 0.030944902,
-0.8243484, -0.9217396, -0.17168765, 0.73621315, 0.96724296, 0.30899405, -0.6333425,
-0.9933869, -0.44011596, 0.51779556, 0.9996483, 0.56242895, -0.39188495, -0.98590165,
-0.67348486, 0.25813076, 0.95242214, 0.771061, -0.119210064, -0.89988, -0.85320437,
-0.022096619, 0.8293267, 0.9182708, 0.16296104, -0.7421744, -0.96495813, -0.30056378,
0.6401675, 0.99233174, 0.43215075, -0.52534765, -0.99984384, -0.5550882, 0.40001294,
0.9873441, 0.6669156, -0.266672, -0.9550826, -0.7653946, 0.12799358, 0.9037051,
0.8485543, 0.013246605, -0.83423996, -0.9147302, -0.15422167, 0.7480775, 0.9625977,
0.29210997, -0.6469423, -0.99119884, -0.42415172, 0.53285855, 0.9999611, 0.54770404,
-0.40810958, -0.98870915, -0.66029406, 0.27519232, 0.9576682, 0.7596683, -0.13676707,
-0.90745944, -0.8438378, -0.004395554, 0.8390879, 0.91111785, 0.14547022, -0.75392205,
-0.96016186, -0.2836333, 0.65366644, 0.98998827, 0.41611943, -0.54032767, -1.0,
-0.54027694, 0.41617423, 0.98999673};

float lookUpCos[] = {1.0, 0.5403023, -0.41614684, -0.9899925, -0.6536436, 0.2836622, 0.96017027, 0.75390226, -0.14550003, -0.91113025, -0.8390715, 0.004425698, 0.84385395, 0.9074468, 0.13673721, -0.7596879, -0.9576595, -0.27516335, 0.6603167, 0.9887046, 0.40808207, -0.54772925, -0.99996084, -0.53283304, 0.42417902, 0.99120283, 0.6469193, -0.29213881, -0.9626059, -0.74805754, 0.15425146, 0.91474235, 0.8342234, -0.013276747, -0.8485703, -0.9036922, -0.12796369, 0.76541406, 0.95507365, 0.26664293, -0.66693807, -0.98733926, -0.3999853, 0.5551133, 0.9998433, 0.52532196, -0.43217793, -0.9923355, -0.64014435, 0.30059254, 0.964966, 0.7421542, -0.16299078, -0.9182828, -0.8293098, 0.022126757, 0.8532201, 0.8998668, 0.119180135, -0.7710802, -0.95241296, -0.25810164, 0.67350715, 0.9858966, 0.39185724, -0.56245387, -0.99964744, -0.5177698, 0.44014302, 0.9933904, 0.6333192, -0.30902272, -0.9672506, -0.7361927, 0.17171735, 0.92175126, 0.82433134, -0.030975033, -0.8578031, -0.89597094, -0.11038724, 0.77668595, 0.9496777, 0.24954012, -0.6800235, -0.98437667, -0.38369843, 0.5697503, 0.99937326, 0.510177, -0.44807363, -0.9943675, -0.62644446, 0.3174287, 0.96945935, 0.7301736, -0.18043044, -0.92514753, -0.81928825, 0.03982088, 0.8623189, 0.89200485, 0.1015857, -0.7822309, -0.946868, -0.24095905, 0.68648654, 0.98277956, 0.3755096, -0.57700217, -0.9990208, -0.50254434, 0.4559691, 0.9952666, 0.6195206, -0.3258098, -0.9715922, -0.7240972, 0.18912943, 0.9284713, 0.81418097, -0.04866361, -0.8667671, -0.8879689, -0.0927762, 0.78771454, 0.94398415, 0.2323591, -0.6928958, -0.9811055, -0.36729133, 0.58420885, 0.99859005, 0.4948722, -0.46382886, -0.99608785, -0.61254823, 0.3341654, 0.9736489, 0.7179641, -0.19781357, -0.93172234, -0.8090099, 0.057502527, 0.8711474, 0.8838634, 0.08395944, -0.7931364, -0.94102633, -0.22374095, 0.6992508, 0.9793546, 0.35904428, -0.5913697, -0.9980811, -0.48716134, 0.4716523, 0.996831, 0.6055279, -0.3424948, -0.9756293, -0.71177477, 0.20648223, 0.9349004, 0.8037755, -0.06633694, -0.87545943, -0.8796886, -0.07513609, 0.7984962, 0.9379948, 0.21510527, -0.705551, -0.97752696, -0.3507691, 0.5984842, 0.9974939, 0.47941232, -0.47943875, -0.99749607, -0.5984601, 0.35079736, 0.9775333, 0.70552963, -0.21513471, -0.9380052, -0.79847807, 0.07516615, 0.8797029, 0.8754449, 0.06630686, -0.8037934, -0.93488973, -0.20645273, 0.7117959, 0.9756227, 0.34246644, -0.60555184, -0.9968286, -0.47162572, 0.48718768, 0.99808294, 0.59134537, -0.35907242, -0.9793607, -0.69922924, 0.22377034, 0.9410365, 0.79311806, -0.08398947, -0.88387746, -0.8711326, -0.05747243, 0.8090276, 0.93171144, 0.19778402, -0.7179851, -0.973642, -0.33413696, 0.6125721, 0.99608517, 0.46380216, -0.4948984, -0.99859166, -0.58418435, 0.36731938, 0.98111135, 0.6928741, -0.23238842, -0.9439941, -0.78769594, 0.09280622, 0.8879828, 0.866752, 0.0486335, -0.8141985, -0.9284601, -0.18909982, 0.724118, 0.97158504, 0.32578132, -0.61954427, -0.9952637, -0.45594227, 0.5025704, 0.9990221, 0.57697755, -0.37553754, -0.98278517, -0.6864646, 0.2409883, 0.9468777, 0.78221214, -0.10161569, -0.8920185, -0.8623036, -0.03979076, 0.81930554, 0.9251361, 0.1804008, -0.73019415, -0.96945196, -0.31740013, 0.62646794, 0.99436426, 0.44804665, -0.51020294, -0.99937433, -0.5697256, 0.38372627, 0.984382, 0.6800014, -0.24956931, -0.9496871, -0.776667, 0.1104172, 0.89598435, 0.8577876, 0.030944902, -0.8243484, -0.9217396, -0.17168765, 0.73621315, 0.96724296, 0.30899405, -0.6333425, -0.9933869, -0.44011596, 0.51779556, 0.9996483, 0.56242895, -0.39188495, -0.98590165, -0.67348486, 0.25813076, 0.95242214, 0.771061, -0.119210064, -0.89988, -0.85320437, -0.022096619, 0.8293267, 0.9182708, 0.16296104, -0.7421744, -0.96495813, -0.30056378, 0.6401675, 0.99233174, 0.43215075, -0.52534765, -0.99984384, -0.5550882, 0.40001294, 0.9873441, 0.6669156, -0.266672, -0.9550826, -0.7653946, 0.12799358, 0.9037051, 0.8485543, 0.013246605, -0.83423996, -0.9147302, -0.15422167, 0.7480775, 0.9625977, 0.29210997, -0.6469423, -0.99119884, -0.42415172, 0.53285855, 0.9999611, 0.54770404, -0.40810958, -0.98870915, -0.66029406, 0.27519232, 0.9576682, 0.7596683, -0.13676707, -0.90745944, -0.8438378, -0.004395554, 0.8390879, 0.91111785, 0.14547022, -0.75392205, -0.96016186, -0.2836333, 0.65366644, 0.98998827, 0.41611943, -0.54032767, -1.0, -0.54027694, 0.41617423, 0.98999673};

task main()
{
  Precedes(move);
  SetSensorLowspeed(IN_3);
}

task move()
{
  Acquire(sensorMutex);
  //lookAround();
  //square(SPEED, 1000);
  //rotate(70);
  //Wait(1000);
  moveWithHeadingDirection(SPEED, 30);
  Wait(300);
  
  arc(SPEED, 300);

  //makeAStar(70);
  Off(OUT_ABC);
  Release(sensorMutex);
}

// not used yet
task checkSensors()
{
  while(true){
    Acquire(sensorMutex);
    checkUltraSensorPort3(SPEED);
    Release(sensorMutex);
  }
}

void square(int speed, int sizesec)
{
  moveForward(speed);
  Wait(sizesec);
  moveLeft(speed);
  Wait(sizesec);
  moveBack(speed);
  Wait(sizesec);
  moveRight(speed);
  Wait(sizesec);
  Off(OUT_ABC);
}

void checkUltraSensorPort3(int speed){
   if(SensorUS(IN_3)<DISTANCE){
     moveForward(speed);
   }
}

void arc(int speed, int radius)
{
  int i, x = 0;
  while(i < 4){
    while(x != 360){
      moveWithAngle(speed, x);
      Wait(radius);
      x += 30;
    }
    i++;
  }
  Off(OUT_ABC);
}

//straigth line, heading still
void moveForward(int speed)
{
  OnFwd(OUT_A, speed);
  OnRev(OUT_B, speed);
  Off(OUT_C);
}

//straigth line, heading still
void moveLeft(int speed)
{
  OnFwd(OUT_C, speed);
  OnRev(OUT_B, speed/2);
  OnRev(OUT_A, speed/2);
}

//straigth line, heading still
void moveRight(int speed)
{
  OnRev(OUT_C, speed);
  OnFwd(OUT_B, speed/2);
  OnFwd(OUT_A, speed/2);
}

//straigth line, heading still
void moveBack(int speed)
{
  OnRev(OUT_A, speed);
  OnFwd(OUT_B, speed);
  Off(OUT_C);
}

void moveWithHeadingDirection(int speed, float angle)
{
  float p, q, r;
  /*p = cos(angle)*1 - sin(angle)*0;
  q = cos(angle+120)*1 - sin(angle+120)*0;
  r = cos(angle+240)*1 - sin(angle+240)*0;*/
  p = lookUpCos[angle];
  p = lookUpCos[angle+120];
  p = lookUpCos[angle+240];

  OnRev(OUT_B, speed*p);
  OnRev(OUT_A, speed*q);
  OnRev(OUT_C, speed*r);
}

void moveWithAngle(int speed, float angle)
{
  if(angle == 0){
    moveRight(speed);
  }
  else if(angle == 15){
  
  }
  else if(angle == 30){
    OnFwd(OUT_A, speed);
    OnRev(OUT_C, speed);
    Off(OUT_B);
  }
  else if(angle == 45){
    OnFwd(OUT_A, speed);
    OnRev(OUT_B, speed/4);
    OnRev(OUT_C, (speed/4)*3);
  }
  else if(angle == 60){
    OnFwd(OUT_A, speed);
    OnRev(OUT_B, speed/2);
    OnRev(OUT_C, speed/2);
  }
  else if(angle == 90){
    moveForward(speed);
  }
  else if(angle == 120){
    OnRev(OUT_B, speed);
    OnFwd(OUT_A, speed/2);
    OnFwd(OUT_C, speed/2);
  }
  else if(angle == 150){
    OnFwd(OUT_C, speed);
    OnRev(OUT_B, speed);
    Off(OUT_A);
  }
  else if(angle == 180){
    moveLeft(speed);
  }
  else if(angle == 210){
    OnRev(OUT_A, speed);
    OnFwd(OUT_C, speed);
    Off(OUT_B);
  }
  else if(angle == 240){
    OnRev(OUT_A, speed);
    OnFwd(OUT_B, speed/2);
    OnFwd(OUT_C, speed/2);
  }
  else if(angle == 270){
    moveBack(speed);
  }
  else if(angle == 300){
    OnFwd(OUT_B, speed);
    OnRev(OUT_A, speed/2);
    OnRev(OUT_C, speed/2);
  }
  else if(angle == 330){
    OnRev(OUT_C, speed);
    OnFwd(OUT_B, speed);
    Off(OUT_A);
  }
}

// stand still
void rotate(int speed)
{
  OnFwd(OUT_ABC, speed);
}

// stand still
void lookAround()
{
  lookLeft();
  lookRight();
}

void lookLeft()
{
  OnFwd(OUT_C, 50);
  Wait(200);
}

void lookRight()
{
  OnRev(OUT_C, 50);
  Wait(200);
}

void makeAStar(int speed){
  while(true){
    OnFwd(OUT_C, speed);
    Wait(1500);
    Off(OUT_ABC);
    OnFwd(OUT_B, speed);
    Wait(1500);
    Off(OUT_ABC);
    OnFwd(OUT_A, speed);
    Wait(1500);
    Off(OUT_ABC);
  }
}


