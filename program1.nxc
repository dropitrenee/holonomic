//#import "math.h"
#include "NXCDefs.h"

#define SPEED 70 //power
#define DISTANCE 30 //cm

void square(int speed, int sizesec);
void arc(int speed, int radius);
void makeAStar(int speed);
void moveForward(int speed);
void moveLeft(int speed);
void moveRight(int speed);
void moveBack(int speed);
void rotate(int speed);
void moveWithAngle(int speed, float angle);
void moveWithHeadingDirection(int speed, int angle);
void lookAround();
void lookLeft();
void lookRight();

void checkUltraSensorPort3(int speed);
void checkHeading();

//float lookUpSin[] = {0.0, 0.017452406, 0.034899496, 0.05233596, 0.06975647, 0.08715574, 0.104528464, 0.12186935, 0.1391731, 0.15643448, 0.17364818, 0.190809, 0.2079117, 0.22495104, 0.2419219, 0.25881904, 0.27563736, 0.2923717, 0.309017, 0.32556814, 0.34202012, 0.35836795, 0.37460658, 0.39073113, 0.40673664, 0.42261827, 0.43837115, 0.4539905, 0.46947157, 0.4848096, 0.5, 0.5150381, 0.52991927, 0.54463905, 0.5591929, 0.57357645, 0.58778524, 0.601815, 0.6156615, 0.6293204, 0.6427876, 0.656059, 0.6691306, 0.6819984, 0.6946584, 0.70710677, 0.7193398, 0.7313537, 0.74314487, 0.75470954, 0.76604444, 0.7771459, 0.7880107, 0.79863554, 0.809017, 0.81915206, 0.82903755, 0.83867055, 0.8480481, 0.8571673, 0.86602545, 0.8746197, 0.88294756, 0.8910065, 0.89879405, 0.9063078, 0.9135455, 0.9205048, 0.92718387, 0.9335804, 0.9396926, 0.94551855, 0.95105654, 0.9563047, 0.9612617, 0.9659258, 0.9702957, 0.97437006, 0.9781476, 0.98162717, 0.9848077, 0.98768836, 0.99026805, 0.99254614, 0.9945219, 0.9961947, 0.9975641, 0.9986295, 0.99939084, 0.9998477, 1.0, 0.9998477, 0.99939084, 0.9986295, 0.9975641, 0.9961947, 0.9945219, 0.99254614, 0.99026805, 0.98768836, 0.9848077, 0.98162717, 0.9781476, 0.97437006, 0.9702957, 0.9659258, 0.9612617, 0.9563047, 0.95105654, 0.9455186, 0.9396926, 0.93358046, 0.92718387, 0.92050487, 0.9135455, 0.90630776, 0.89879405, 0.8910066, 0.88294756, 0.8746197, 0.8660254, 0.8571673, 0.84804803, 0.83867055, 0.8290376, 0.819152, 0.809017, 0.7986355, 0.7880108, 0.77714604, 0.76604444, 0.7547096, 0.7431448, 0.7313537, 0.7193399, 0.70710677, 0.69465846, 0.6819983, 0.6691306, 0.65605897, 0.64278764, 0.6293205, 0.61566144, 0.6018151, 0.5877852, 0.57357645, 0.559193, 0.54463905, 0.5299193, 0.515038, 0.50000006, 0.48480955, 0.46947157, 0.45399058, 0.43837112, 0.42261833, 0.40673658, 0.39073116, 0.3746067, 0.35836792, 0.3420202, 0.3255681, 0.30901703, 0.29237184, 0.27563736, 0.25881913, 0.24192186, 0.22495112, 0.20791161, 0.19080901, 0.1736483, 0.15643445, 0.13917318, 0.12186928, 0.104528494, 0.08715588, 0.06975647, 0.05233605, 0.03489945, 0.017452458, -8.742278E-8, -0.017452395, -0.034899388, -0.052335985, -0.0697564, -0.08715581, -0.104528435, -0.121869214, -0.1391731, -0.15643437, -0.17364822, -0.19080895, -0.20791179, -0.22495104, -0.2419218, -0.25881907, -0.2756373, -0.29237178, -0.30901697, -0.32556805, -0.34202015, -0.35836786, -0.37460664, -0.3907311, -0.40673652, -0.42261827, -0.43837106, -0.45399055, -0.4694715, -0.4848097, -0.49999997, -0.51503795, -0.52991927, -0.544639, -0.55919296, -0.5735764, -0.5877851, -0.60181504, -0.6156614, -0.62932044, -0.6427876, -0.6560591, -0.6691306, -0.68199825, -0.6946584, -0.7071067, -0.71933985, -0.7313537, -0.74314475, -0.7547096, -0.76604456, -0.777146, -0.7880107, -0.7986354, -0.8090168, -0.8191521, -0.8290376, -0.83867055, -0.84804803, -0.8571672, -0.86602545, -0.8746197, -0.88294756, -0.89100647, -0.8987941, -0.9063078, -0.9135454, -0.9205048, -0.9271838, -0.9335805, -0.9396927, -0.94551855, -0.9510565, -0.95630467, -0.96126175, -0.9659259, -0.9702957, -0.97437006, -0.97814757, -0.9816272, -0.9848078, -0.9876883, -0.99026805, -0.99254614, -0.9945219, -0.9961947, -0.997564, -0.9986295, -0.99939084, -0.9998477, -1.0, -0.9998477, -0.99939084, -0.9986295, -0.997564, -0.9961947, -0.9945219, -0.9925462, -0.99026805, -0.9876883, -0.9848077, -0.9816272, -0.9781476, -0.97437, -0.9702957, -0.9659258, -0.96126175, -0.95630485, -0.9510565, -0.94551855, -0.9396926, -0.93358046, -0.9271839, -0.9205048, -0.9135454, -0.9063078, -0.8987941, -0.89100665, -0.88294756, -0.8746197, -0.86602545, -0.8571674, -0.848048, -0.8386705, -0.8290376, -0.8191521, -0.8090171, -0.7986354, -0.7880107, -0.777146, -0.7660445, -0.7547097, -0.74314475, -0.73135364, -0.71933985, -0.7071069, -0.6946585, -0.68199825, -0.66913056, -0.6560591, -0.64278775, -0.6293206, -0.6156614, -0.601815, -0.5877853, -0.57357657, -0.55919313, -0.54463893, -0.52991927, -0.51503813, -0.5000002, -0.48480946, -0.46947148, -0.45399052, -0.43837124, -0.42261845, -0.4067365, -0.39073107, -0.37460664, -0.35836807, -0.34202036, -0.32556802, -0.30901694, -0.29237175, -0.2756375, -0.25881928, -0.24192177, -0.22495103, -0.20791176, -0.19080916, -0.17364845, -0.15643436, -0.13917309, -0.12186943, -0.10452865, -0.08715603, -0.06975638, -0.052335963, -0.0348996};
float lookUpCos[] = {1.0, 0.9998477, 0.99939084, 0.9986295, 0.9975641, 0.9961947, 0.9945219, 0.99254614, 0.99026805, 0.98768836, 0.9848077, 0.98162717, 0.9781476, 0.97437006, 0.9702957, 0.9659258, 0.9612617, 0.9563048, 0.95105654, 0.94551855, 0.9396926, 0.9335804, 0.92718387, 0.92050487, 0.9135454, 0.90630776, 0.89879405, 0.8910065, 0.88294756, 0.8746197, 0.8660254, 0.8571673, 0.8480481, 0.83867055, 0.8290376, 0.81915206, 0.809017, 0.79863554, 0.7880108, 0.7771459, 0.76604444, 0.7547096, 0.7431448, 0.7313537, 0.7193398, 0.70710677, 0.6946584, 0.6819984, 0.66913056, 0.656059, 0.64278764, 0.62932044, 0.6156615, 0.60181504, 0.5877853, 0.57357645, 0.5591929, 0.54463905, 0.52991927, 0.5150381, 0.49999997, 0.48480958, 0.4694716, 0.45399052, 0.43837115, 0.42261824, 0.4067366, 0.3907312, 0.37460664, 0.35836798, 0.34202015, 0.32556814, 0.30901697, 0.29237178, 0.2756374, 0.25881907, 0.2419219, 0.22495104, 0.20791166, 0.19080906, 0.17364822, 0.15643449, 0.1391731, 0.121869326, 0.10452842, 0.087155804, 0.06975651, 0.052335974, 0.034899496, 0.017452383, -4.371139E-8, -0.017452352, -0.034899462, -0.05233594, -0.06975648, -0.08715577, -0.10452851, -0.12186929, -0.13917308, -0.15643445, -0.1736482, -0.19080903, -0.20791163, -0.224951, -0.24192187, -0.25881904, -0.27563736, -0.29237175, -0.30901694, -0.3255681, -0.34202012, -0.35836795, -0.3746066, -0.39073116, -0.40673658, -0.42261833, -0.43837112, -0.4539904, -0.46947157, -0.48480955, -0.50000006, -0.515038, -0.5299193, -0.54463905, -0.55919284, -0.57357645, -0.5877852, -0.6018151, -0.61566144, -0.6293203, -0.64278764, -0.65605897, -0.6691307, -0.6819983, -0.6946583, -0.70710677, -0.7193397, -0.73135376, -0.7431448, -0.75470966, -0.76604444, -0.77714586, -0.7880108, -0.7986355, -0.80901706, -0.81915206, -0.8290375, -0.83867055, -0.84804803, -0.8571673, -0.8660254, -0.8746198, -0.88294756, -0.89100647, -0.89879405, -0.90630776, -0.9135455, -0.92050487, -0.9271838, -0.93358046, -0.9396926, -0.9455186, -0.9510565, -0.9563047, -0.9612617, -0.9659258, -0.9702957, -0.97437006, -0.9781476, -0.98162717, -0.9848077, -0.98768836, -0.99026805, -0.99254614, -0.9945219, -0.99619466, -0.9975641, -0.9986295, -0.99939084, -0.9998477, -1.0, -0.9998477, -0.99939084, -0.9986295, -0.9975641, -0.9961947, -0.9945219, -0.99254614, -0.99026805, -0.98768836, -0.9848077, -0.98162717, -0.97814757, -0.97437006, -0.9702957, -0.9659258, -0.9612617, -0.9563047, -0.95105654, -0.9455186, -0.9396926, -0.93358046, -0.9271838, -0.92050487, -0.9135455, -0.9063078, -0.8987941, -0.8910065, -0.8829476, -0.87461966, -0.8660254, -0.85716736, -0.8480481, -0.8386706, -0.82903755, -0.81915206, -0.80901706, -0.7986355, -0.78801084, -0.7771459, -0.7660445, -0.75470954, -0.7431448, -0.73135376, -0.7193398, -0.7071068, -0.69465834, -0.6819984, -0.6691307, -0.656059, -0.6427875, -0.6293203, -0.6156615, -0.60181516, -0.5877854, -0.57357633, -0.5591929, -0.5446391, -0.5299194, -0.5150383, -0.4999999, -0.4848096, -0.46947163, -0.45399067, -0.43837097, -0.42261818, -0.40673664, -0.39073122, -0.3746068, -0.35836777, -0.34202006, -0.32556817, -0.3090171, -0.2923719, -0.2756372, -0.25881898, -0.24192193, -0.22495118, -0.20791192, -0.19080885, -0.17364813, -0.15643452, -0.13917325, -0.121869594, -0.10452834, -0.087155715, -0.069756545, -0.052336123, -0.034899764, -0.017452296, 1.1924881E-8, 0.01745232, 0.03489931, 0.05233615, 0.06975657, 0.08715574, 0.10452836, 0.12186914, 0.13917327, 0.15643454, 0.17364815, 0.19080888, 0.20791148, 0.22495121, 0.24192195, 0.258819, 0.2756372, 0.29237148, 0.30901712, 0.3255682, 0.3420201, 0.3583678, 0.37460637, 0.39073125, 0.40673667, 0.42261818, 0.438371, 0.45399025, 0.46947166, 0.48480964, 0.4999999, 0.5150379, 0.52991945, 0.5446391, 0.5591929, 0.57357633, 0.58778507, 0.60181516, 0.6156615, 0.6293204, 0.6427875, 0.65605885, 0.66913074, 0.6819984, 0.69465834, 0.70710665, 0.7193396, 0.7313538, 0.74314487, 0.75470954, 0.7660443, 0.7771458, 0.78801084, 0.79863554, 0.80901694, 0.81915194, 0.8290374, 0.8386706, 0.8480481, 0.85716724, 0.8660253, 0.8746198, 0.8829476, 0.8910065, 0.898794, 0.9063077, 0.91354555, 0.92050487, 0.92718387, 0.9335804, 0.93969256, 0.9455186, 0.95105654, 0.9563047, 0.96126163, 0.96592575, 0.9702958, 0.97437006, 0.97814757, 0.98162717, 0.9848077, 0.98768836, 0.99026805, 0.99254614, 0.99452186, 0.99619466, 0.9975641, 0.9986295, 0.99939084};

string heading = "0";

task main()
{
  SetSensorLowspeed(IN_3);
  SetSensorLowspeed(IN_4);
  //lookAround();
  //square(SPEED, 1000);
  //rotate(70);
  //arc(SPEED, 200);

  //makeAStar(70);
  //Off(OUT_ABC);
  
  checkHeading();
}

void square(int speed, int sizesec)
{
  moveForward(speed);
  Wait(sizesec);
  moveLeft(speed);
  Wait(sizesec);
  moveBack(speed);
  Wait(sizesec);
  moveRight(speed);
  Wait(sizesec);
  Off(OUT_ABC);
}

void checkUltraSensorPort3(int speed){
   if(SensorUS(IN_3)<DISTANCE){
     moveForward(speed);
   }
}

void checkHeading(){
   while(true){
       heading = NumToStr(SensorHTCompass(IN_4));
       //string value = (string)x;
       TextOut(0, LCD_LINE2, heading);
   }
}

void arc(int speed, int radius)
{
  int i, x = 0;
  while(true){
    while(x != 360){
      moveWithHeadingDirection(speed, x);
      //moveWithAngle(speed, x);
      Wait(radius);
      x += 10;
      //It is stopping to fast. Is not a whole circle
    }
    i++;
  }
  Off(OUT_ABC);
}

//straigth line, heading still
void moveForward(int speed)
{
  OnFwd(OUT_A, speed);
  OnRev(OUT_B, speed);
  Off(OUT_C);
}

//straigth line, heading still
void moveLeft(int speed)
{
  OnFwd(OUT_C, speed);
  OnRev(OUT_B, speed/2);
  OnRev(OUT_A, speed/2);
}

//straigth line, heading still
void moveRight(int speed)
{
  OnRev(OUT_C, speed);
  OnFwd(OUT_B, speed/2);
  OnFwd(OUT_A, speed/2);
}

//straigth line, heading still
void moveBack(int speed)
{
  OnRev(OUT_A, speed);
  OnFwd(OUT_B, speed);
  Off(OUT_C);
}

void moveWithHeadingDirection(int speed, int angle)
{
  float p, q, r;
  //Matrix
  /*p = cos(angle)*1 - sin(angle)*0;
  q = cos(angle+120)*1 - sin(angle+120)*0;
  r = cos(angle+240)*1 - sin(angle+240)*0;*/

  int motorA = angle+120;
  int motorB = angle;
  int motorC = angle+240;

  if(motorA>360){
    motorA = motorA%360;
  }
  if(motorB>360){
    motorB = motorB%360;
  }
  if(motorC>360){
    motorC = motorC%360;
  }

  p = lookUpCos[motorB];
  q = lookUpCos[motorA];
  r = lookUpCos[motorC];


  /*
  int xa = motorA/90;
  int ya = motorA%90;
  int xb = motorB/90;
  int yb = motorB%90;
  int xc = motorC/90;
  int yc = motorC%90;

  // how to look in the lookuptable
  switch(xa){
       case 0:
            q = lookUpCos[ya];
       case 1:
            int za = 90-ya;
            q = lookUpCos[za];
            q = -q;
       case 2:
            q = lookUpCos[ya];
            q = -q;
       case 3:
            za = 90-ya;
            q = lookUpCos[za];
  }
  switch(xb){
       case 0:
            p = lookUpCos[yb];
       case 1:
            int zb = 90-yb;
            p = lookUpCos[zb];
            p = -p;
       case 2:
            p = lookUpCos[yb];
            p = -p;
       case 3:
            zb = 90-yb;
            p = lookUpCos[zb];
  }
  switch(xc){
       case 0:
            r = lookUpCos[yc];
       case 1:
            int zc = 90-yc;
            r = lookUpCos[zc];
            r = -r;
       case 2:
            r = lookUpCos[yc];
            r = -r;
       case 3:
            zc = 90-yc;
            r = lookUpCos[zc];
  }*/

  OnRev(OUT_B, speed * p);
  OnRev(OUT_A, speed * q);
  OnRev(OUT_C, speed * r);
}

void moveWithAngle(int speed, float angle)
{
  if(angle == 0){
    moveRight(speed);
  }
  else if(angle == 15){
  
  }
  else if(angle == 30){
    OnFwd(OUT_A, speed);
    OnRev(OUT_C, speed);
    Off(OUT_B);
  }
  else if(angle == 45){
    OnFwd(OUT_A, speed);
    OnRev(OUT_B, speed/4);
    OnRev(OUT_C, (speed/4)*3);
  }
  else if(angle == 60){
    OnFwd(OUT_A, speed);
    OnRev(OUT_B, speed/2);
    OnRev(OUT_C, speed/2);
  }
  else if(angle == 90){
    moveForward(speed);
  }
  else if(angle == 120){
    OnRev(OUT_B, speed);
    OnFwd(OUT_A, speed/2);
    OnFwd(OUT_C, speed/2);
  }
  else if(angle == 150){
    OnFwd(OUT_C, speed);
    OnRev(OUT_B, speed);
    Off(OUT_A);
  }
  else if(angle == 180){
    moveLeft(speed);
  }
  else if(angle == 210){
    OnRev(OUT_A, speed);
    OnFwd(OUT_C, speed);
    Off(OUT_B);
  }
  else if(angle == 240){
    OnRev(OUT_A, speed);
    OnFwd(OUT_B, speed/2);
    OnFwd(OUT_C, speed/2);
  }
  else if(angle == 270){
    moveBack(speed);
  }
  else if(angle == 300){
    OnFwd(OUT_B, speed);
    OnRev(OUT_A, speed/2);
    OnRev(OUT_C, speed/2);
  }
  else if(angle == 330){
    OnRev(OUT_C, speed);
    OnFwd(OUT_B, speed);
    Off(OUT_A);
  }
}

// stand still
void rotate(int speed)
{
  OnFwd(OUT_ABC, speed);
}

// stand still
void lookAround()
{
  lookLeft();
  lookRight();
}

void lookLeft()
{
  OnFwd(OUT_C, 50);
  Wait(200);
}

void lookRight()
{
  OnRev(OUT_C, 50);
  Wait(200);
}

void makeAStar(int speed){
  while(true){
    OnFwd(OUT_C, speed);
    Wait(1500);
    Off(OUT_ABC);
    OnFwd(OUT_B, speed);
    Wait(1500);
    Off(OUT_ABC);
    OnFwd(OUT_A, speed);
    Wait(1500);
    Off(OUT_ABC);
  }
}


